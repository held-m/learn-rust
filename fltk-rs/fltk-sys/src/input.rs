/* automatically generated by rust-bindgen 0.56.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Widget {
    _unused: [u8; 0],
}
pub type Fl_Callback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut libc::c_void)>;
pub type custom_handler_callback = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Fl_Widget,
        arg2: libc::c_int,
        arg3: *mut libc::c_void,
    ) -> libc::c_int,
>;
pub type custom_draw_callback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut libc::c_void)>;
extern "C" {
    pub fn Fl_Widget_new(
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
        title: *const libc::c_char,
    ) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Widget_x(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_y(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_width(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_height(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_label(arg1: *mut Fl_Widget) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Widget_set_label(arg1: *mut Fl_Widget, title: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Widget_redraw(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_show(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_hide(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_activate(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_deactivate(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_redraw_label(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_resize(
        arg1: *mut Fl_Widget,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Widget_widget_resize(
        arg1: *mut Fl_Widget,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Widget_tooltip(arg1: *mut Fl_Widget) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Widget_set_tooltip(arg1: *mut Fl_Widget, txt: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Widget_get_type(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_type(arg1: *mut Fl_Widget, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Widget_color(arg1: *mut Fl_Widget) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Widget_set_color(arg1: *mut Fl_Widget, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Widget_measure_label(
        arg1: *const Fl_Widget,
        arg2: *mut libc::c_int,
        arg3: *mut libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Widget_label_color(arg1: *mut Fl_Widget) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Widget_set_label_color(arg1: *mut Fl_Widget, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Widget_label_font(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_label_font(arg1: *mut Fl_Widget, font: libc::c_int);
}
extern "C" {
    pub fn Fl_Widget_label_size(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_label_size(arg1: *mut Fl_Widget, sz: libc::c_int);
}
extern "C" {
    pub fn Fl_Widget_label_type(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_label_type(arg1: *mut Fl_Widget, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Widget_box(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_box(arg1: *mut Fl_Widget, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Widget_changed(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_changed(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_clear_changed(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_align(arg1: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_align(arg1: *mut Fl_Widget, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Widget_delete(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_set_image(arg1: *mut Fl_Widget, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Widget_handle(
        self_: *mut Fl_Widget,
        cb: custom_handler_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Widget_draw(self_: *mut Fl_Widget, cb: custom_draw_callback, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Widget_set_when(arg1: *mut Fl_Widget, arg2: libc::c_int);
}
extern "C" {
    pub fn Fl_Widget_when(arg1: *const Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_image(arg1: *const Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_parent(self_: *const Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_selection_color(arg1: *mut Fl_Widget) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Widget_set_selection_color(arg1: *mut Fl_Widget, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Widget_do_callback(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_inside(self_: *const Fl_Widget, arg1: *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_window(arg1: *const Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_top_window(arg1: *const Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_takes_events(arg1: *const Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_user_data(arg1: *const Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_take_focus(self_: *mut Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_visible_focus(self_: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_clear_visible_focus(self_: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_visible_focus(self_: *mut Fl_Widget, v: libc::c_int);
}
extern "C" {
    pub fn Fl_Widget_has_visible_focus(self_: *mut Fl_Widget) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Widget_set_user_data(arg1: *mut Fl_Widget, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Widget_draw_data(self_: *const Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_handle_data(self_: *const Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_set_draw_data(self_: *mut Fl_Widget, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Widget_set_handle_data(self_: *mut Fl_Widget, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Widget_damage(self_: *const Fl_Widget) -> libc::c_uchar;
}
extern "C" {
    pub fn Fl_Widget_set_damage(self_: *mut Fl_Widget, flag: libc::c_uchar);
}
extern "C" {
    pub fn Fl_Widget_clear_damage(self_: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_as_window(self_: *mut Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_as_group(self_: *mut Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_set_deimage(arg1: *mut Fl_Widget, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Widget_deimage(arg1: *const Fl_Widget) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Widget_set_callback(arg1: *mut Fl_Widget, arg2: Fl_Callback, arg3: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Widget_set_deleter(
        arg1: *mut Fl_Widget,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Widget_visible(self_: *const Fl_Widget) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Widget_visible_r(self_: *const Fl_Widget) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Input {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Input_new(
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
        title: *const libc::c_char,
    ) -> *mut Fl_Input;
}
extern "C" {
    pub fn Fl_Input_x(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_y(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_width(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_height(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_label(arg1: *mut Fl_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Input_set_label(arg1: *mut Fl_Input, title: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Input_redraw(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_show(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_hide(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_activate(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_deactivate(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_redraw_label(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_resize(
        arg1: *mut Fl_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Input_widget_resize(
        arg1: *mut Fl_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Input_tooltip(arg1: *mut Fl_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Input_set_tooltip(arg1: *mut Fl_Input, txt: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Input_get_type(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_type(arg1: *mut Fl_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_color(arg1: *mut Fl_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Input_set_color(arg1: *mut Fl_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Input_measure_label(
        arg1: *const Fl_Input,
        arg2: *mut libc::c_int,
        arg3: *mut libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Input_label_color(arg1: *mut Fl_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Input_set_label_color(arg1: *mut Fl_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Input_label_font(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_label_font(arg1: *mut Fl_Input, font: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_label_size(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_label_size(arg1: *mut Fl_Input, sz: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_label_type(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_label_type(arg1: *mut Fl_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_box(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_box(arg1: *mut Fl_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_changed(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_changed(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_clear_changed(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_align(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_align(arg1: *mut Fl_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_delete(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_set_image(arg1: *mut Fl_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Input_handle(
        self_: *mut Fl_Input,
        cb: custom_handler_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Input_draw(self_: *mut Fl_Input, cb: custom_draw_callback, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Input_set_when(arg1: *mut Fl_Input, arg2: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_when(arg1: *const Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_image(arg1: *const Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_parent(self_: *const Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_selection_color(arg1: *mut Fl_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Input_set_selection_color(arg1: *mut Fl_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Input_do_callback(arg1: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_inside(self_: *const Fl_Input, arg1: *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_window(arg1: *const Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_top_window(arg1: *const Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_takes_events(arg1: *const Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_user_data(arg1: *const Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_take_focus(self_: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_visible_focus(self_: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_clear_visible_focus(self_: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_visible_focus(self_: *mut Fl_Input, v: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_has_visible_focus(self_: *mut Fl_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Input_set_user_data(arg1: *mut Fl_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Input_draw_data(self_: *const Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_handle_data(self_: *const Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_set_draw_data(self_: *mut Fl_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Input_set_handle_data(self_: *mut Fl_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Input_damage(self_: *const Fl_Input) -> libc::c_uchar;
}
extern "C" {
    pub fn Fl_Input_set_damage(self_: *mut Fl_Input, flag: libc::c_uchar);
}
extern "C" {
    pub fn Fl_Input_clear_damage(self_: *mut Fl_Input);
}
extern "C" {
    pub fn Fl_Input_as_window(self_: *mut Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_as_group(self_: *mut Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_set_deimage(arg1: *mut Fl_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Input_deimage(arg1: *const Fl_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Input_set_callback(arg1: *mut Fl_Input, arg2: Fl_Callback, arg3: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Input_set_deleter(
        arg1: *mut Fl_Input,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Input_visible(self_: *const Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_visible_r(self_: *const Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_value(arg1: *mut Fl_Input, arg2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_value(arg1: *mut Fl_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Input_maximum_size(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_maximum_size(arg1: *mut Fl_Input, m: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_position(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_position(arg1: *mut Fl_Input, p: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_mark(arg1: *mut Fl_Input, m: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_mark(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_replace(
        arg1: *mut Fl_Input,
        b: libc::c_int,
        e: libc::c_int,
        text: *const libc::c_char,
        ilen: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_insert(
        arg1: *mut Fl_Input,
        t: *const libc::c_char,
        l: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_append(
        arg1: *mut Fl_Input,
        t: *const libc::c_char,
        l: libc::c_int,
        keep_selection: libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_copy(arg1: *mut Fl_Input, clipboard: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_undo(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_copy_cuts(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_text_font(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_text_font(arg1: *mut Fl_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_text_color(arg1: *mut Fl_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Input_set_text_color(arg1: *mut Fl_Input, s: libc::c_uint);
}
extern "C" {
    pub fn Fl_Input_text_size(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_text_size(arg1: *mut Fl_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_readonly(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_readonly(arg1: *mut Fl_Input, boolean: libc::c_int);
}
extern "C" {
    pub fn Fl_Input_wrap(arg1: *mut Fl_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Input_set_wrap(arg1: *mut Fl_Input, boolean: libc::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Int_Input {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Int_Input_new(
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
        title: *const libc::c_char,
    ) -> *mut Fl_Int_Input;
}
extern "C" {
    pub fn Fl_Int_Input_x(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_y(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_width(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_height(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_label(arg1: *mut Fl_Int_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Int_Input_set_label(arg1: *mut Fl_Int_Input, title: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Int_Input_redraw(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_show(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_hide(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_activate(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_deactivate(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_redraw_label(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_resize(
        arg1: *mut Fl_Int_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Int_Input_widget_resize(
        arg1: *mut Fl_Int_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Int_Input_tooltip(arg1: *mut Fl_Int_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Int_Input_set_tooltip(arg1: *mut Fl_Int_Input, txt: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Int_Input_get_type(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_type(arg1: *mut Fl_Int_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_color(arg1: *mut Fl_Int_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Int_Input_set_color(arg1: *mut Fl_Int_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Int_Input_measure_label(
        arg1: *const Fl_Int_Input,
        arg2: *mut libc::c_int,
        arg3: *mut libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Int_Input_label_color(arg1: *mut Fl_Int_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Int_Input_set_label_color(arg1: *mut Fl_Int_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Int_Input_label_font(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_label_font(arg1: *mut Fl_Int_Input, font: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_label_size(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_label_size(arg1: *mut Fl_Int_Input, sz: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_label_type(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_label_type(arg1: *mut Fl_Int_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_box(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_box(arg1: *mut Fl_Int_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_changed(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_changed(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_clear_changed(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_align(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_align(arg1: *mut Fl_Int_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_delete(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_set_image(arg1: *mut Fl_Int_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Int_Input_handle(
        self_: *mut Fl_Int_Input,
        cb: custom_handler_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Int_Input_draw(
        self_: *mut Fl_Int_Input,
        cb: custom_draw_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Int_Input_set_when(arg1: *mut Fl_Int_Input, arg2: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_when(arg1: *const Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_image(arg1: *const Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_parent(self_: *const Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_selection_color(arg1: *mut Fl_Int_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Int_Input_set_selection_color(arg1: *mut Fl_Int_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Int_Input_do_callback(arg1: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_inside(self_: *const Fl_Int_Input, arg1: *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_window(arg1: *const Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_top_window(arg1: *const Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_takes_events(arg1: *const Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_user_data(arg1: *const Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_take_focus(self_: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_visible_focus(self_: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_clear_visible_focus(self_: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_visible_focus(self_: *mut Fl_Int_Input, v: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_has_visible_focus(self_: *mut Fl_Int_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Int_Input_set_user_data(arg1: *mut Fl_Int_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Int_Input_draw_data(self_: *const Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_handle_data(self_: *const Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_set_draw_data(self_: *mut Fl_Int_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Int_Input_set_handle_data(self_: *mut Fl_Int_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Int_Input_damage(self_: *const Fl_Int_Input) -> libc::c_uchar;
}
extern "C" {
    pub fn Fl_Int_Input_set_damage(self_: *mut Fl_Int_Input, flag: libc::c_uchar);
}
extern "C" {
    pub fn Fl_Int_Input_clear_damage(self_: *mut Fl_Int_Input);
}
extern "C" {
    pub fn Fl_Int_Input_as_window(self_: *mut Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_as_group(self_: *mut Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_set_deimage(arg1: *mut Fl_Int_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Int_Input_deimage(arg1: *const Fl_Int_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Int_Input_set_callback(
        arg1: *mut Fl_Int_Input,
        arg2: Fl_Callback,
        arg3: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Int_Input_set_deleter(
        arg1: *mut Fl_Int_Input,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Int_Input_visible(self_: *const Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_visible_r(self_: *const Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_value(
        arg1: *mut Fl_Int_Input,
        arg2: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_value(arg1: *mut Fl_Int_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Int_Input_maximum_size(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_maximum_size(arg1: *mut Fl_Int_Input, m: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_position(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_position(arg1: *mut Fl_Int_Input, p: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_mark(arg1: *mut Fl_Int_Input, m: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_mark(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_replace(
        arg1: *mut Fl_Int_Input,
        b: libc::c_int,
        e: libc::c_int,
        text: *const libc::c_char,
        ilen: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_insert(
        arg1: *mut Fl_Int_Input,
        t: *const libc::c_char,
        l: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_append(
        arg1: *mut Fl_Int_Input,
        t: *const libc::c_char,
        l: libc::c_int,
        keep_selection: libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_copy(arg1: *mut Fl_Int_Input, clipboard: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_undo(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_copy_cuts(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_text_font(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_text_font(arg1: *mut Fl_Int_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_text_color(arg1: *mut Fl_Int_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Int_Input_set_text_color(arg1: *mut Fl_Int_Input, s: libc::c_uint);
}
extern "C" {
    pub fn Fl_Int_Input_text_size(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_text_size(arg1: *mut Fl_Int_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_readonly(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_readonly(arg1: *mut Fl_Int_Input, boolean: libc::c_int);
}
extern "C" {
    pub fn Fl_Int_Input_wrap(arg1: *mut Fl_Int_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Int_Input_set_wrap(arg1: *mut Fl_Int_Input, boolean: libc::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Float_Input {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Float_Input_new(
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
        title: *const libc::c_char,
    ) -> *mut Fl_Float_Input;
}
extern "C" {
    pub fn Fl_Float_Input_x(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_y(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_width(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_height(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_label(arg1: *mut Fl_Float_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Float_Input_set_label(arg1: *mut Fl_Float_Input, title: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Float_Input_redraw(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_show(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_hide(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_activate(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_deactivate(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_redraw_label(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_resize(
        arg1: *mut Fl_Float_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Float_Input_widget_resize(
        arg1: *mut Fl_Float_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Float_Input_tooltip(arg1: *mut Fl_Float_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Float_Input_set_tooltip(arg1: *mut Fl_Float_Input, txt: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Float_Input_get_type(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_type(arg1: *mut Fl_Float_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_color(arg1: *mut Fl_Float_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Float_Input_set_color(arg1: *mut Fl_Float_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Float_Input_measure_label(
        arg1: *const Fl_Float_Input,
        arg2: *mut libc::c_int,
        arg3: *mut libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Float_Input_label_color(arg1: *mut Fl_Float_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Float_Input_set_label_color(arg1: *mut Fl_Float_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Float_Input_label_font(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_label_font(arg1: *mut Fl_Float_Input, font: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_label_size(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_label_size(arg1: *mut Fl_Float_Input, sz: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_label_type(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_label_type(arg1: *mut Fl_Float_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_box(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_box(arg1: *mut Fl_Float_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_changed(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_changed(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_clear_changed(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_align(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_align(arg1: *mut Fl_Float_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_delete(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_set_image(arg1: *mut Fl_Float_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Float_Input_handle(
        self_: *mut Fl_Float_Input,
        cb: custom_handler_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Float_Input_draw(
        self_: *mut Fl_Float_Input,
        cb: custom_draw_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Float_Input_set_when(arg1: *mut Fl_Float_Input, arg2: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_when(arg1: *const Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_image(arg1: *const Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_parent(self_: *const Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_selection_color(arg1: *mut Fl_Float_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Float_Input_set_selection_color(arg1: *mut Fl_Float_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Float_Input_do_callback(arg1: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_inside(
        self_: *const Fl_Float_Input,
        arg1: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_window(arg1: *const Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_top_window(arg1: *const Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_takes_events(arg1: *const Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_user_data(arg1: *const Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_take_focus(self_: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_visible_focus(self_: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_clear_visible_focus(self_: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_visible_focus(self_: *mut Fl_Float_Input, v: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_has_visible_focus(self_: *mut Fl_Float_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Float_Input_set_user_data(arg1: *mut Fl_Float_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Float_Input_draw_data(self_: *const Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_handle_data(self_: *const Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_set_draw_data(self_: *mut Fl_Float_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Float_Input_set_handle_data(self_: *mut Fl_Float_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Float_Input_damage(self_: *const Fl_Float_Input) -> libc::c_uchar;
}
extern "C" {
    pub fn Fl_Float_Input_set_damage(self_: *mut Fl_Float_Input, flag: libc::c_uchar);
}
extern "C" {
    pub fn Fl_Float_Input_clear_damage(self_: *mut Fl_Float_Input);
}
extern "C" {
    pub fn Fl_Float_Input_as_window(self_: *mut Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_as_group(self_: *mut Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_set_deimage(arg1: *mut Fl_Float_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Float_Input_deimage(arg1: *const Fl_Float_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Float_Input_set_callback(
        arg1: *mut Fl_Float_Input,
        arg2: Fl_Callback,
        arg3: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Float_Input_set_deleter(
        arg1: *mut Fl_Float_Input,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Float_Input_visible(self_: *const Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_visible_r(self_: *const Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_value(
        arg1: *mut Fl_Float_Input,
        arg2: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_value(arg1: *mut Fl_Float_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Float_Input_maximum_size(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_maximum_size(arg1: *mut Fl_Float_Input, m: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_position(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_position(arg1: *mut Fl_Float_Input, p: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_mark(arg1: *mut Fl_Float_Input, m: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_mark(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_replace(
        arg1: *mut Fl_Float_Input,
        b: libc::c_int,
        e: libc::c_int,
        text: *const libc::c_char,
        ilen: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_insert(
        arg1: *mut Fl_Float_Input,
        t: *const libc::c_char,
        l: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_append(
        arg1: *mut Fl_Float_Input,
        t: *const libc::c_char,
        l: libc::c_int,
        keep_selection: libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_copy(arg1: *mut Fl_Float_Input, clipboard: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_undo(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_copy_cuts(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_text_font(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_text_font(arg1: *mut Fl_Float_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_text_color(arg1: *mut Fl_Float_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Float_Input_set_text_color(arg1: *mut Fl_Float_Input, s: libc::c_uint);
}
extern "C" {
    pub fn Fl_Float_Input_text_size(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_text_size(arg1: *mut Fl_Float_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_readonly(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_readonly(arg1: *mut Fl_Float_Input, boolean: libc::c_int);
}
extern "C" {
    pub fn Fl_Float_Input_wrap(arg1: *mut Fl_Float_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Float_Input_set_wrap(arg1: *mut Fl_Float_Input, boolean: libc::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Multiline_Input {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Multiline_Input_new(
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
        title: *const libc::c_char,
    ) -> *mut Fl_Multiline_Input;
}
extern "C" {
    pub fn Fl_Multiline_Input_x(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_y(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_width(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_height(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_label(arg1: *mut Fl_Multiline_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_label(arg1: *mut Fl_Multiline_Input, title: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Multiline_Input_redraw(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_show(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_hide(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_activate(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_deactivate(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_redraw_label(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_resize(
        arg1: *mut Fl_Multiline_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_widget_resize(
        arg1: *mut Fl_Multiline_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_tooltip(arg1: *mut Fl_Multiline_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_tooltip(arg1: *mut Fl_Multiline_Input, txt: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Multiline_Input_get_type(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_type(arg1: *mut Fl_Multiline_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_color(arg1: *mut Fl_Multiline_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_color(arg1: *mut Fl_Multiline_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Multiline_Input_measure_label(
        arg1: *const Fl_Multiline_Input,
        arg2: *mut libc::c_int,
        arg3: *mut libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_label_color(arg1: *mut Fl_Multiline_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_label_color(arg1: *mut Fl_Multiline_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Multiline_Input_label_font(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_label_font(arg1: *mut Fl_Multiline_Input, font: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_label_size(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_label_size(arg1: *mut Fl_Multiline_Input, sz: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_label_type(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_label_type(arg1: *mut Fl_Multiline_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_box(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_box(arg1: *mut Fl_Multiline_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_changed(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_changed(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_clear_changed(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_align(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_align(arg1: *mut Fl_Multiline_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_delete(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_set_image(arg1: *mut Fl_Multiline_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Multiline_Input_handle(
        self_: *mut Fl_Multiline_Input,
        cb: custom_handler_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_draw(
        self_: *mut Fl_Multiline_Input,
        cb: custom_draw_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_set_when(arg1: *mut Fl_Multiline_Input, arg2: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_when(arg1: *const Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_image(arg1: *const Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_parent(self_: *const Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_selection_color(arg1: *mut Fl_Multiline_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_selection_color(
        arg1: *mut Fl_Multiline_Input,
        color: libc::c_uint,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_do_callback(arg1: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_inside(
        self_: *const Fl_Multiline_Input,
        arg1: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_window(arg1: *const Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_top_window(arg1: *const Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_takes_events(arg1: *const Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_user_data(arg1: *const Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_take_focus(self_: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_visible_focus(self_: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_clear_visible_focus(self_: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_visible_focus(self_: *mut Fl_Multiline_Input, v: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_has_visible_focus(self_: *mut Fl_Multiline_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_user_data(arg1: *mut Fl_Multiline_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Multiline_Input_draw_data(self_: *const Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_handle_data(self_: *const Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_draw_data(
        self_: *mut Fl_Multiline_Input,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_set_handle_data(
        self_: *mut Fl_Multiline_Input,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_damage(self_: *const Fl_Multiline_Input) -> libc::c_uchar;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_damage(self_: *mut Fl_Multiline_Input, flag: libc::c_uchar);
}
extern "C" {
    pub fn Fl_Multiline_Input_clear_damage(self_: *mut Fl_Multiline_Input);
}
extern "C" {
    pub fn Fl_Multiline_Input_as_window(self_: *mut Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_as_group(self_: *mut Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_deimage(arg1: *mut Fl_Multiline_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Multiline_Input_deimage(arg1: *const Fl_Multiline_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_callback(
        arg1: *mut Fl_Multiline_Input,
        arg2: Fl_Callback,
        arg3: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_set_deleter(
        arg1: *mut Fl_Multiline_Input,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Multiline_Input_visible(self_: *const Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_visible_r(self_: *const Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_value(
        arg1: *mut Fl_Multiline_Input,
        arg2: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_value(arg1: *mut Fl_Multiline_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Multiline_Input_maximum_size(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_maximum_size(arg1: *mut Fl_Multiline_Input, m: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_position(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_position(
        arg1: *mut Fl_Multiline_Input,
        p: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_mark(
        arg1: *mut Fl_Multiline_Input,
        m: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_mark(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_replace(
        arg1: *mut Fl_Multiline_Input,
        b: libc::c_int,
        e: libc::c_int,
        text: *const libc::c_char,
        ilen: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_insert(
        arg1: *mut Fl_Multiline_Input,
        t: *const libc::c_char,
        l: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_append(
        arg1: *mut Fl_Multiline_Input,
        t: *const libc::c_char,
        l: libc::c_int,
        keep_selection: libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_copy(
        arg1: *mut Fl_Multiline_Input,
        clipboard: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_undo(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_copy_cuts(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_text_font(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_text_font(arg1: *mut Fl_Multiline_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_text_color(arg1: *mut Fl_Multiline_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_text_color(arg1: *mut Fl_Multiline_Input, s: libc::c_uint);
}
extern "C" {
    pub fn Fl_Multiline_Input_text_size(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_text_size(arg1: *mut Fl_Multiline_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_readonly(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_readonly(arg1: *mut Fl_Multiline_Input, boolean: libc::c_int);
}
extern "C" {
    pub fn Fl_Multiline_Input_wrap(arg1: *mut Fl_Multiline_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Multiline_Input_set_wrap(arg1: *mut Fl_Multiline_Input, boolean: libc::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Secret_Input {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Secret_Input_new(
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
        title: *const libc::c_char,
    ) -> *mut Fl_Secret_Input;
}
extern "C" {
    pub fn Fl_Secret_Input_x(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_y(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_width(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_height(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_label(arg1: *mut Fl_Secret_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Secret_Input_set_label(arg1: *mut Fl_Secret_Input, title: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Secret_Input_redraw(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_show(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_hide(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_activate(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_deactivate(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_redraw_label(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_resize(
        arg1: *mut Fl_Secret_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Secret_Input_widget_resize(
        arg1: *mut Fl_Secret_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Secret_Input_tooltip(arg1: *mut Fl_Secret_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Secret_Input_set_tooltip(arg1: *mut Fl_Secret_Input, txt: *const libc::c_char);
}
extern "C" {
    pub fn Fl_Secret_Input_get_type(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_type(arg1: *mut Fl_Secret_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_color(arg1: *mut Fl_Secret_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Secret_Input_set_color(arg1: *mut Fl_Secret_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Secret_Input_measure_label(
        arg1: *const Fl_Secret_Input,
        arg2: *mut libc::c_int,
        arg3: *mut libc::c_int,
    );
}
extern "C" {
    pub fn Fl_Secret_Input_label_color(arg1: *mut Fl_Secret_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Secret_Input_set_label_color(arg1: *mut Fl_Secret_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Secret_Input_label_font(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_label_font(arg1: *mut Fl_Secret_Input, font: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_label_size(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_label_size(arg1: *mut Fl_Secret_Input, sz: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_label_type(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_label_type(arg1: *mut Fl_Secret_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_box(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_box(arg1: *mut Fl_Secret_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_changed(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_changed(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_clear_changed(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_align(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_align(arg1: *mut Fl_Secret_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_delete(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_set_image(arg1: *mut Fl_Secret_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Secret_Input_handle(
        self_: *mut Fl_Secret_Input,
        cb: custom_handler_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Secret_Input_draw(
        self_: *mut Fl_Secret_Input,
        cb: custom_draw_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Secret_Input_set_when(arg1: *mut Fl_Secret_Input, arg2: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_when(arg1: *const Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_image(arg1: *const Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_parent(self_: *const Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_selection_color(arg1: *mut Fl_Secret_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Secret_Input_set_selection_color(arg1: *mut Fl_Secret_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_Secret_Input_do_callback(arg1: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_inside(
        self_: *const Fl_Secret_Input,
        arg1: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_window(arg1: *const Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_top_window(arg1: *const Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_takes_events(arg1: *const Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_user_data(arg1: *const Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_take_focus(self_: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_visible_focus(self_: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_clear_visible_focus(self_: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_visible_focus(self_: *mut Fl_Secret_Input, v: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_has_visible_focus(self_: *mut Fl_Secret_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Secret_Input_set_user_data(arg1: *mut Fl_Secret_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Secret_Input_draw_data(self_: *const Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_handle_data(self_: *const Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_set_draw_data(self_: *mut Fl_Secret_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Secret_Input_set_handle_data(self_: *mut Fl_Secret_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Secret_Input_damage(self_: *const Fl_Secret_Input) -> libc::c_uchar;
}
extern "C" {
    pub fn Fl_Secret_Input_set_damage(self_: *mut Fl_Secret_Input, flag: libc::c_uchar);
}
extern "C" {
    pub fn Fl_Secret_Input_clear_damage(self_: *mut Fl_Secret_Input);
}
extern "C" {
    pub fn Fl_Secret_Input_as_window(self_: *mut Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_as_group(self_: *mut Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_set_deimage(arg1: *mut Fl_Secret_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_Secret_Input_deimage(arg1: *const Fl_Secret_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_Secret_Input_set_callback(
        arg1: *mut Fl_Secret_Input,
        arg2: Fl_Callback,
        arg3: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_Secret_Input_set_deleter(
        arg1: *mut Fl_Secret_Input,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Secret_Input_visible(self_: *const Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_visible_r(self_: *const Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_value(
        arg1: *mut Fl_Secret_Input,
        arg2: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_value(arg1: *mut Fl_Secret_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_Secret_Input_maximum_size(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_maximum_size(arg1: *mut Fl_Secret_Input, m: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_position(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_position(arg1: *mut Fl_Secret_Input, p: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_mark(arg1: *mut Fl_Secret_Input, m: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_mark(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_replace(
        arg1: *mut Fl_Secret_Input,
        b: libc::c_int,
        e: libc::c_int,
        text: *const libc::c_char,
        ilen: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_insert(
        arg1: *mut Fl_Secret_Input,
        t: *const libc::c_char,
        l: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_append(
        arg1: *mut Fl_Secret_Input,
        t: *const libc::c_char,
        l: libc::c_int,
        keep_selection: libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_copy(arg1: *mut Fl_Secret_Input, clipboard: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_undo(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_copy_cuts(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_text_font(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_text_font(arg1: *mut Fl_Secret_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_text_color(arg1: *mut Fl_Secret_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_Secret_Input_set_text_color(arg1: *mut Fl_Secret_Input, s: libc::c_uint);
}
extern "C" {
    pub fn Fl_Secret_Input_text_size(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_text_size(arg1: *mut Fl_Secret_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_readonly(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_readonly(arg1: *mut Fl_Secret_Input, boolean: libc::c_int);
}
extern "C" {
    pub fn Fl_Secret_Input_wrap(arg1: *mut Fl_Secret_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_Secret_Input_set_wrap(arg1: *mut Fl_Secret_Input, boolean: libc::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_File_Input {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_File_Input_new(
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
        title: *const libc::c_char,
    ) -> *mut Fl_File_Input;
}
extern "C" {
    pub fn Fl_File_Input_x(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_y(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_width(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_height(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_label(arg1: *mut Fl_File_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_File_Input_set_label(arg1: *mut Fl_File_Input, title: *const libc::c_char);
}
extern "C" {
    pub fn Fl_File_Input_redraw(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_show(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_hide(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_activate(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_deactivate(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_redraw_label(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_resize(
        arg1: *mut Fl_File_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_File_Input_widget_resize(
        arg1: *mut Fl_File_Input,
        x: libc::c_int,
        y: libc::c_int,
        width: libc::c_int,
        height: libc::c_int,
    );
}
extern "C" {
    pub fn Fl_File_Input_tooltip(arg1: *mut Fl_File_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_File_Input_set_tooltip(arg1: *mut Fl_File_Input, txt: *const libc::c_char);
}
extern "C" {
    pub fn Fl_File_Input_get_type(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_type(arg1: *mut Fl_File_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_color(arg1: *mut Fl_File_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_File_Input_set_color(arg1: *mut Fl_File_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_File_Input_measure_label(
        arg1: *const Fl_File_Input,
        arg2: *mut libc::c_int,
        arg3: *mut libc::c_int,
    );
}
extern "C" {
    pub fn Fl_File_Input_label_color(arg1: *mut Fl_File_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_File_Input_set_label_color(arg1: *mut Fl_File_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_File_Input_label_font(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_label_font(arg1: *mut Fl_File_Input, font: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_label_size(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_label_size(arg1: *mut Fl_File_Input, sz: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_label_type(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_label_type(arg1: *mut Fl_File_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_box(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_box(arg1: *mut Fl_File_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_changed(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_changed(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_clear_changed(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_align(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_align(arg1: *mut Fl_File_Input, typ: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_delete(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_set_image(arg1: *mut Fl_File_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_File_Input_handle(
        self_: *mut Fl_File_Input,
        cb: custom_handler_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_File_Input_draw(
        self_: *mut Fl_File_Input,
        cb: custom_draw_callback,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_File_Input_set_when(arg1: *mut Fl_File_Input, arg2: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_when(arg1: *const Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_image(arg1: *const Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_parent(self_: *const Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_selection_color(arg1: *mut Fl_File_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_File_Input_set_selection_color(arg1: *mut Fl_File_Input, color: libc::c_uint);
}
extern "C" {
    pub fn Fl_File_Input_do_callback(arg1: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_inside(
        self_: *const Fl_File_Input,
        arg1: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_window(arg1: *const Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_top_window(arg1: *const Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_takes_events(arg1: *const Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_user_data(arg1: *const Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_take_focus(self_: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_visible_focus(self_: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_clear_visible_focus(self_: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_visible_focus(self_: *mut Fl_File_Input, v: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_has_visible_focus(self_: *mut Fl_File_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_File_Input_set_user_data(arg1: *mut Fl_File_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_File_Input_draw_data(self_: *const Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_handle_data(self_: *const Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_set_draw_data(self_: *mut Fl_File_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_File_Input_set_handle_data(self_: *mut Fl_File_Input, data: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_File_Input_damage(self_: *const Fl_File_Input) -> libc::c_uchar;
}
extern "C" {
    pub fn Fl_File_Input_set_damage(self_: *mut Fl_File_Input, flag: libc::c_uchar);
}
extern "C" {
    pub fn Fl_File_Input_clear_damage(self_: *mut Fl_File_Input);
}
extern "C" {
    pub fn Fl_File_Input_as_window(self_: *mut Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_as_group(self_: *mut Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_set_deimage(arg1: *mut Fl_File_Input, arg2: *mut libc::c_void);
}
extern "C" {
    pub fn Fl_File_Input_deimage(arg1: *const Fl_File_Input) -> *mut libc::c_void;
}
extern "C" {
    pub fn Fl_File_Input_set_callback(
        arg1: *mut Fl_File_Input,
        arg2: Fl_Callback,
        arg3: *mut libc::c_void,
    );
}
extern "C" {
    pub fn Fl_File_Input_set_deleter(
        arg1: *mut Fl_File_Input,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn Fl_File_Input_visible(self_: *const Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_visible_r(self_: *const Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_down_box(self_: *mut Fl_File_Input, box_: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_down_box(self_: *const Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_value(
        arg1: *mut Fl_File_Input,
        arg2: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_value(arg1: *mut Fl_File_Input) -> *const libc::c_char;
}
extern "C" {
    pub fn Fl_File_Input_maximum_size(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_maximum_size(arg1: *mut Fl_File_Input, m: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_position(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_position(arg1: *mut Fl_File_Input, p: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_mark(arg1: *mut Fl_File_Input, m: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_mark(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_replace(
        arg1: *mut Fl_File_Input,
        b: libc::c_int,
        e: libc::c_int,
        text: *const libc::c_char,
        ilen: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_insert(
        arg1: *mut Fl_File_Input,
        t: *const libc::c_char,
        l: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_append(
        arg1: *mut Fl_File_Input,
        t: *const libc::c_char,
        l: libc::c_int,
        keep_selection: libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_copy(arg1: *mut Fl_File_Input, clipboard: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_undo(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_copy_cuts(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_text_font(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_text_font(arg1: *mut Fl_File_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_text_color(arg1: *mut Fl_File_Input) -> libc::c_uint;
}
extern "C" {
    pub fn Fl_File_Input_set_text_color(arg1: *mut Fl_File_Input, s: libc::c_uint);
}
extern "C" {
    pub fn Fl_File_Input_text_size(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_text_size(arg1: *mut Fl_File_Input, s: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_readonly(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_readonly(arg1: *mut Fl_File_Input, boolean: libc::c_int);
}
extern "C" {
    pub fn Fl_File_Input_wrap(arg1: *mut Fl_File_Input) -> libc::c_int;
}
extern "C" {
    pub fn Fl_File_Input_set_wrap(arg1: *mut Fl_File_Input, boolean: libc::c_int);
}
